
timeout.php
Time out is essentially a script that will unset a specific session when no activity has taken place, display and alert message, which once confirmed will send the user back to the plant list page. This will mainly be included when adding or editing records, as if the computer is left alone, then anyone could distort the record information.

plants.php
The plants page is where the list of plants are going to be displayed. The page will require the connection to the database through the config file, and it must include the html pages header.php, nav.php and the footer.php files.  The page will also have its own heading that will be created by a variable, will be declared above the header.php include, where the header will have $title so it can be adjusted easily. The main content area below the navigation, which is then split into two. The first section is where the user will be able to sort the database records to their specific criteria. This sorting script will be placed in a separate file. The other half, is the main part of the page. In this section, the user can select a link that will allow them to create a new plant record and store it in the database. Under that, there is an advanced search, which will display records that comes under the criteria of their search input. This will also be in a separate script. This search will allow the user to not have to scroll through the long list of records. The plants are split into their scientific name and their common name. Once they are clicked, then they are taken to the plants individual record. The database itself is going to be called and declared from a separate script, where it will then place them into a table, which will present the plant lists.

db_declare.php
This script is basically where and how the plant list will be created and how it will be represented. Firstly, the table will have to be created, which will have a div attached to it. Then the scientific and common headings will be created. Once this has been created, an SQL statement will be used, making a handle onto the database connection, where it will select all the fields by using.  We can then use the handle from the SQL statement to write out the database, using "while($row = pg_fetch_array ($res))" and then defining the cells by calling them by $row['dbcolumn'] inside of td tags.  Each of these rows will be links to the page that has their information on. The table is then closed. The script does require config.php, but this is already included in plants.php

Breadcrumbs
Ive found a script that basically works, but I cant really explain it well enough. Iâ€™d need help


Plant location
When showing the specific location of the plant, we will be using the google maps JavaScript API. To use this we will have to gain an API key from google, in which once we have access, we must activate the Google Maps API v3. To get the API key, we must give it some information about the website, such as the web address. Because we will be testing it on another server, we will register it to that site first, which we can change to the server we will be using it on later on at the final part of the project.
Implementing the code must start with giving the script source, included into the HTML head, where the API key must be inserted.  Then a new JavaScript script will be created, stating an initialize function. This will be made up of a variable mapProp, where it will specify all of the options for the map, such as where to center the map, how close are we going to zoom in on the location and what type of map is it going to be, such as Roadmap and Terrain, which we will be using HYBRID, as it allows to see a combination of the roads and the scenery, which may be useful to a botanist trying to find the specific plant. In these options however, is the lat/lang input, which will locate where the plant is. Because this depends on the location of the plant that will be displayed, we will have to use a variable that will get the latitude and longitude from the record and place it in the variable so it can there be used to display its location. After these options have been defined, the mapProp variable is closed, and the map is then created through creating a new map variable, which will assign itself to a div depending on its ID. The script must then be closed. To display this, in the body, there must be a div with the same ID stated in the script. 
