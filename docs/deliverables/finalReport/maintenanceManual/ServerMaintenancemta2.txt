Maintenance Manual

Server

Program Description

The server is a combination of a Database and an application program interface. It acts as the bridge between the Android device and the website to the Database, further protecting the database from direct access. This allows 
code, sensitive information and data to be stored in a non-accessible place. The server contains a relational database which holds all the data important for the system: specimens, reserves, records and users. 
To access this data, the website and the android application must use the API .php script commands which run validation, sanitisation and SQL queries using JSON data structures. 


Program Structure

The server API is a list of commands that are to be run by the android application and the website to access and manipulate data in the Database. 
The Design Specification document contains all the information about the program structure.

For a list of the commands in use in the system and what they do, please see the document SE-O2-DS-00: Design Specification, section 1.5: Significant Server Components.
For a detailed list of how the commands work including their required POST requests, their return status codes and required headers, please see the document SE-O2-DS-00: Design Specification, 
section 4.1.3: Server Interface.
For an example sequence diagram of the most complex command (addRecord.php), please see document SE-02-DS-00: Design Specification, section 4.1.13. All other commands follow a simpified sequence to this.
For the Component Diagram of the server, plaese see document SE-02-DS-00: Design Specification, section 4.2.1: Detailed Design: Diagrams. 


Algorithms

Validation and Sanitisation:

To validate data inputs we ensure strings are not empty and we ensure latitude and longitudes are valid as true values. 
Ensuring strings are not empty: 
if(empty($locationName) || empty($locationOS))
{
	die();
	return status code 400;
}

Ensuring latitude and longitude values are true:
if($Latitude > 90 || $Latitude < -90 || $Longitude > 180 || $Longitude < -180)
{
	die();
	return status code 400;
}

To sanitise all the data inputs, the command real_escape_string() was used on all POST data received from the website: 
$SpeciesName = $conn->real_escape_string($specimen->SpeciesName);

This prevents any malicious data from touching the database.

SQL Queries were used to retrieve/manipulate data in the database:

Add: "INSERT INTO botany_users (user_name, user_phone, user_email) VALUES ('$UserName', '$UserPhone', '$UserEmail')"
Update: "UPDATE botany_reserves SET location_name='$LocationName', location_os='$LocationOS', description='$Description' WHERE reserve_id = $ReserveID"
Get: "SELECT * FROM botany_reserves WHERE reserve_id=$reserveID"
Remove: "DELETE FROM botany_reserves WHERE reserve_id = $reserveID"

We manually manipulate the committing for the SQL queries to ensure no invalid data gets added. All checking is done, and then we tell it to commit. This allows to reverse any affected data if it proves to be wrong.

We provided the ability to authenticate a password input to ensure the user was authorised to use commands:
if(!strcmp($password, $CONFIG['adminPassword']))	
{
	echo "true";
}
else
{
	echo "false";
}

We wrote SQL queries to create the database tables, e.g:
create table botany_reserves (
	reserve_id INT AUTO_INCREMENT,
    location_name VARCHAR(50) NOT NULL,
	location_os VARCHAR(10) NOT NULL,
	description TEXT,
	PRIMARY KEY (reserve_id));


Main Data Areas

To transfer data from the android application and the website to the database,  the data had to be structured in a JSON file format. JSON was a nice, flexible and easy to use language, allowing us 
to quickly and easily create data structures to be decoded by the API. To do this, the commands json_encode() and json_decode() are used. For example, if a new specimen was being added by the website, 
the website will json_encode(specimen array), and the server will json_decode the POST data. If a specimen is being sent to the website, the server will json_encode(specimen array) and the website 
will json_decode(POST data). To see each specific JSON data structure, please see document SE-02-DS-00: Design Specification, section 4.2.2: Significant Data Structures. This section also details 
the config file for use when changing resource locations and passwords. 


